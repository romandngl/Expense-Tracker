@page "/debt"
@using ExpensesTracker.Services
@inject DebtService debtService
@inject NavigationManager NavigationManager
@inject AuthenticationStateService authStateService

<h1 class="debt-title">Debt Records</h1>

<div class="filter-container">
    <div class="filter-group">
        <label for="start-date">Date Range:</label>
        <input type="date" id="start-date" class="date-input" @bind="startDate">
        <input type="date" id="end-date" class="date-input" @bind="endDate">
    </div>

    <div class="filter-group">
        <label for="search">Search:</label>
        <input type="text" id="search" class="search-input" placeholder="Search by title" @bind="searchQuery">
    </div>

    <div class="filter-group">
        <label for="sort-filter">Sort By Date:</label>
        <select id="sort-filter" class="dropdown" @bind="sortOrder">
            <option value="latest">Latest</option>
            <option value="oldest">Oldest</option>
        </select>
    </div>

    <div class="filter-buttons">
        <button class="search-button" @onclick="ApplyFiltersAndSorts">Search</button>
        <button class="reload-button" @onclick="ReloadPage">Reload</button>
        <button class="add-button" @onclick="NavigateToAddDebt">Add New</button>
    </div>
</div>

<table class="debt-table">
    <thead>
        <tr>
            <th>DATE</th>
            <th>TITLE</th>
            <th>AMOUNT</th>
            <th>ACTIONS</th>
        </tr>
    </thead>
    <tbody>
        @if (filteredDebts.Any())
        {
            @foreach (var debt in filteredDebts)
            {
                <tr>
                    <td>@debt.Date.ToShortDateString()</td>
                    <td>@debt.Title</td>
                    <td class="amount">@debt.Amount.ToString("C")</td>
                    <td>
                        <button class="details-button" @onclick="() => ViewDebtDetails(debt.Id)">Details</button>
                        <button class="clear-button">Clear</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4" class="no-records">No debts found.</td>
            </tr>
        }
    </tbody>
</table>

<style>
    .debt-title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .filter-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        gap: 1rem;
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .filter-group {
        display: flex;
        flex-direction: column;
        flex: 1 1 200px;
    }

    .dropdown, .date-input, .search-input {
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        margin-top: 0.25rem;
    }

    .filter-buttons {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }

    .search-button, .reload-button, .add-button {
        background-color: #6c63ff;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        font-size: 1rem;
    }

        .search-button:hover, .reload-button:hover, .add-button:hover {
            background-color: #574bff;
        }

    .debt-table {
        width: 100%;
        border-collapse: collapse;
    }

        .debt-table th, .debt-table td {
            border: 1px solid #ddd;
            padding: 0.75rem;
            text-align: left;
        }

        .debt-table th {
            background-color: #6c63ff;
            color: white;
            font-weight: bold;
        }

        .debt-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .debt-table tr:hover {
            background-color: #f1f1f1;
        }

    .amount {
        font-weight: bold;
        color: red;
    }

    .details-button, .clear-button {
        background-color: #6c63ff;
        color: white;
        border: none;
        padding: 0.5rem 0.75rem;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
    }

        .details-button:hover, .clear-button:hover {
            background-color: #574bff;
        }

    .no-records {
        text-align: center;
        font-style: italic;
        color: gray;
    }
</style>

@code {
    private List<DebtItems> filteredDebts = new();
    private List<DebtItems> allDebts = new();
    private string currentUserEmail;

    // Filter inputs
    private DateTime? startDate;
    private DateTime? endDate;
    private string sortOrder = "latest";
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        currentUserEmail = await authStateService.GetAuthenticatedUserEmailAsync();

        if (!string.IsNullOrEmpty(currentUserEmail))
        {
            allDebts = debtService.GetUserDebts(currentUserEmail);
            ReloadPage();
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void ApplyFiltersAndSorts()
    {
        filteredDebts = allDebts;

        // Filter by date range
        if (startDate.HasValue)
        {
            filteredDebts = filteredDebts.Where(d => d.Date >= startDate.Value).ToList();
        }

        if (endDate.HasValue)
        {
            filteredDebts = filteredDebts.Where(d => d.Date <= endDate.Value).ToList();
        }

        // Search by title
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filteredDebts = filteredDebts.Where(d => d.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        // Sort by date
        if (sortOrder == "latest")
        {
            filteredDebts = filteredDebts.OrderByDescending(d => d.Date).ToList();
        }
        else if (sortOrder == "oldest")
        {
            filteredDebts = filteredDebts.OrderBy(d => d.Date).ToList();
        }
    }

    private void ReloadPage()
    {
        // Reset all filters and load the original list
        startDate = null;
        endDate = null;
        sortOrder = "latest";
        searchQuery = string.Empty;
        filteredDebts = allDebts;
    }

    private void NavigateToAddDebt()
    {
        NavigationManager.NavigateTo("/add-debt");
    }

    private void ViewDebtDetails(int id)
    {
        NavigationManager.NavigateTo($"/debt-details/{id}");
    }

   
}
